// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import java.lang.Math;
import org.usfirst.frc4534.DeepSpace2019.Robot;
import org.usfirst.frc4534.DeepSpace2019.subsystems.Navx;

/**
 *
 */
public class DriveWithJoystick extends Command {
    protected double fullSpeed = 1.0;
    protected double drivingSpeed = 0.85;
    protected double demoSpeed = 0.7;
    protected double halfSpeed = 0.5;
    protected short tiltState = 0;
    public boolean autoCorrect = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithJoystick() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.resetMotorControllers();
        //Robot.driveTrain.setInversions();
        //Robot.driveTrain.setToFollow();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double TarsSpeed; 
        if (Robot.oi.aButton.get() == true) {
            autoCorrect = false;
        }
        if (Robot.oi.leftBumper.get() == true) {
            TarsSpeed = Robot.oi.joystick.getRawAxis(1) * halfSpeed;
        }
        else {
            TarsSpeed = Robot.oi.joystick.getRawAxis(1) * (drivingSpeed + ((Robot.oi.joystick.getRawAxis(2)) * (1 - drivingSpeed)));
        }
        if (0.05 > TarsSpeed && TarsSpeed > -0.05) {
            TarsSpeed = 0;
        }

        double TarsRotation;
        if (Robot.oi.rightBumper.get() == true) {
            TarsRotation = Robot.oi.joystick.getRawAxis(4) * 0.55;
        }
        else {
            TarsRotation = Robot.oi.joystick.getRawAxis(4) * demoSpeed;
        }
        if (0.05 > TarsRotation && TarsRotation > -0.05) {
            TarsRotation = 0;
        }
        double tarsTilt = Robot.navx.ahrs.getPitch();
        //Robot.driveTrain.ArcadeDrive(-TarsSpeed, TarsRotation);
        if(autoCorrect == true){
            if(tarsTilt < 5 && tarsTilt > -5) {
                Robot.driveTrain.ArcadeDrive(-TarsSpeed, TarsRotation);
                tiltState = 0;
            }
            else if(tarsTilt < 10 && tarsTilt > -10 && tiltState == 0){
                Robot.driveTrain.ArcadeDrive(-TarsSpeed, TarsRotation);
            }
            else if(tarsTilt > 10 || tarsTilt < -10){
                tiltState = 1;
            }
            if(tiltState == 1 && tarsTilt > 5) {
                Robot.driveTrain.ArcadeDrive(0.7, 0);
            }
            else if(tiltState == 1 && tarsTilt < -5) {
                Robot.driveTrain.ArcadeDrive(-0.7, 0);
            }
        }
        else {
            Robot.driveTrain.ArcadeDrive(-TarsSpeed, TarsRotation);
        }
        Robot.testingPistons.setSaul(Robot.oi.leftJoystick.get());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.TankDrive(0,0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.TankDrive(0,0);
    }
}
