// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4534.DeepSpace2019.commands;

import edu.wpi.first.wpilibj.command.Command;
import java.lang.Math;
import org.usfirst.frc4534.DeepSpace2019.Robot;

/**
 *
 */
public class DriveWithJoystick extends Command {
    public double demoSpeed = 0.5;
    public double maxSpeed = 0.8;
    // Change the multiplier for all movement (Turning and Forwards/Backwards)
    public double drivingSpeed = maxSpeed;
    // Throttle step applied each run of the scaleTarsSpeed() function
    protected double stepSize = 0.05;
    // Multiplier adding to turn speed
    protected double turnSpeed = 0.7;
    // Minimum speed to run motors at; any speed lower than this is rounded down to
    // 0.
    protected double minSpeed = 0.05;
    // Keep at 0, declaration for variable used later in class.
    private double currentTarsSpeed = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithJoystick() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.resetMotorControllers();
        // Robot.driveTrain.setInversions();
        // Robot.driveTrain.setToFollow();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        desTarsSpeed = Robot.oi.joystick.getRawAxis()
        if (Robot.oi.leftBumper.get() == true) {
            desTarsSpeed = Robot.oi.joystick.getRawAxis(1) * 0.5 * drivingSpeed;
        } else {
            desTarsSpeed = Robot.oi.joystick.getRawAxis(1) * drivingSpeed;
        }

        double TarsRotation;
        if (Robot.oi.rightBumper.get() == true) {
            TarsRotation = Robot.oi.joystick.getRawAxis(4) * 0.55 * drivingSpeed;
        } else {
            TarsRotation = Robot.oi.joystick.getRawAxis(4) * turnSpeed * drivingSpeed;
        }
        Robot.driveTrain.ArcadeDrive(-desTarsSpeed, TarsRotation);
        Robot.testingPistons.setSaul(Robot.oi.leftJoystick.get());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.TankDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.TankDrive(0, 0);
    }
    public void setDemoMode(boolean enabled) {
        if (enabled) {
            drivingSpeed = demoSpeed;
            return;
        }
        drivingSpeed = maxSpeed;
        return;
    }
}
