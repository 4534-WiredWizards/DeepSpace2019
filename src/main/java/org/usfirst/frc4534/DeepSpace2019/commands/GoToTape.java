// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4534.DeepSpace2019.Robot;

/**
 *WORK IN PROGRESS
 */
public class GoToTape extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GoToTape() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.limelight);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    double distance;
    double angle;
    double longSide = 14.34;
    double shortSide = 5.3411;
    double maxPercent = 0.49661553;
    double closestDistance = 14.1;
    double sizeAverage;
    double angleAverage;
    double[] sampleSizes = new double[9];
    double[] sampleAngles = new double[9];

    @Override
    protected void initialize() {
        if(Robot.limelight.limelightHasTarget() == true) {
            long startTime = System.currentTimeMillis();
            for(int i = 0; i == 9; i++) {
                while(System.currentTimeMillis() - startTime < 20 * i){
                    //QUICK DO NOTHING
                }
                recordValues(i);
            }
        }
        else {
            //bad boys go here
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
    }
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }

    protected void recordValues(int place) {
        sampleSizes[place] = Robot.limelight.getAreaPercent();
        sampleAngles[place] = Robot.limelight.getXSkew();
    }
}
