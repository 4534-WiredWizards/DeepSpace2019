// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4534.DeepSpace2019.Robot;


/**
 *
 */
public class LiftWithJoystick extends Command {
    protected double fullSpeed = 1.0;
    protected double testSpeed = 0.7;
    protected double halfSpeed = 0.5;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LiftWithJoystick() {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.redesignedLift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // double TarsSpeed;
        // if(Math.abs(Robot.oi.joystick2.getRawAxis(1)) > 0.05) {
        //     TarsSpeed = (Robot.oi.joystick2.getRawAxis(1) * testSpeed);
        //     System.out.println("TarsSpeed = " + TarsSpeed);
        //     Robot.redesignedLift.liftSet(TarsSpeed);
        // }
        // else {
        //     Robot.redesignedLift.liftSet(0.0);
        // }
        // Note to self: negative values are UP on the lift
        double TarsLift;
        if(Robot.oi.joystick2.getRawAxis(3) < 0.5)
        {
            TarsLift = (Robot.oi.joystick2.getRawAxis(1) * testSpeed);
        }
        else
        {
            TarsLift = (Robot.oi.joystick2.getRawAxis(1) * halfSpeed);
        }
        if((0.1 > TarsLift && TarsLift > -0.1) | (Robot.redesignedLift.getLowerLimit() == true && Robot.oi.joystick2.getRawAxis(1) > 0 && Robot.oi.joystick2.getRawAxis(3) > 0.5)) {
            TarsLift = 0.0;
        }
        // if(Robot.redesignedLift.getUpperLimit() && TarsLift < 0.0) {
        //     TarsLift = 0.0;
        // }
        // if(Robot.redesignedLift.getLowerLimit() && TarsLift > 0.0) {
        //     TarsLift = 0.0;
        // }
        // if(Robot.redesignedLift.getLiftEncoder() < Robot.redesignedLift.liftMin() + 100 && TarsLift > 0.0) {
        //     TarsLift *= (Robot.redesignedLift.getLiftEncoder()/100);
        // }
        // if(Robot.redesignedLift.getLiftEncoder() > Robot.redesignedLift.liftMax() - 100 && TarsLift < 0.0) {
        //     TarsLift *= (((Robot.redesignedLift.liftMax() + 50) - Robot.redesignedLift.getLiftEncoder())/150);
        // }
        Robot.redesignedLift.liftSet(TarsLift);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
